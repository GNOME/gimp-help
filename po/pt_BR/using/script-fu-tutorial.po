msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-10-30 04:05-0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: ./src/using/script-fu-tutorial.xml:136(None)
msgid "@@image: 'images/using/script-fu-console.png'; md5=THIS FILE DOESN'T EXIST"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: ./src/using/script-fu-tutorial.xml:882(None)
msgid "@@image: 'images/using/script-fu-menu.png'; md5=THIS FILE DOESN'T EXIST"
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: ./src/using/script-fu-tutorial.xml:1535(None)
msgid "@@image: 'images/using/script-fu-screen.png'; md5=THIS FILE DOESN'T EXIST"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:11(title)
msgid "A Script-Fu Tutorial"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:13(primary)
msgid "Script-Fu"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:14(secondary)
msgid "Tutorial"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:16(para)
msgid "In this training course, we'll introduce you to the fundamentals of Scheme necessary to use Script-Fu, and then build a handy script that you can add to your toolbox of scripts. The script prompts the user for some text, then creates a new image sized perfectly to the text. We will then enhance the script to allow for a buffer of space around the text. We will conclude with a few suggestions for ways to ramp up your knowledge of Script-Fu."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:26(para)
msgid "This section as adapted from a tutorial written for the <application><acronym>GIMP</acronym> 1</application> User Manual by Mike Terry."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:34(title)
msgid "Getting Acquainted With Scheme"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:36(title)
msgid "Let's Start Scheme'ing"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:37(para)
msgid "The first thing to learn is that:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:39(para)
msgid "Every statement in Scheme is surrounded by parentheses ()."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:43(para)
msgid "The second thing you need to know is that:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:45(para)
msgid "The function name/operator is always the first item in the parentheses, and the rest of the items are parameters to the function."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:51(para)
msgid "However, not everything enclosed in parentheses is a function &mdash; they can also be items in a list &mdash; but we'll get to that later. This notation is referred to as prefix notation, because the function prefixes everything else. If you're familiar with postfix notation, or own a calculator that uses Reverse Polish Notation (such as most HP calculators), you should have no problem adapting to formulating expressions in Scheme."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:60(para)
msgid "The third thing to understand is that:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:62(para)
msgid "Mathematical operators are also considered functions, and thus are listed first when writing mathematical expressions."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:67(para)
msgid "This follows logically from the prefix notation that we just mentioned."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:74(title)
msgid "Examples Of Prefix, Infix, And Postfix Notations"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:75(para)
msgid "Here are some quick examples illustrating the differences between <emphasis>prefix</emphasis>, <emphasis>infix</emphasis>, and <emphasis>postfix</emphasis> notations. We'll add a 1 and 23 together:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:82(para)
msgid "Prefix notation: <userinput>+ 1 23</userinput> (the way Scheme will want it)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:88(para)
msgid "Infix notation: <userinput>1 + 23</userinput> (the way we <quote>normally</quote> write it)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:94(para)
msgid "Postfix notation: <userinput>1 23 +</userinput> (the way many <acronym>HP</acronym> calculators will want it)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:103(title)
msgid "Practicing In Scheme"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:104(para)
msgid "Now, let's practice what we have just learned. Start up <acronym>GIMP</acronym>, if you have not already done so, and choose <menuchoice><guimenu>Filters</guimenu><guisubmenu>Script-Fu</guisubmenu><guimenuitem>Console</guimenuitem></menuchoice>. This will start up the Script-Fu Console window, which allows us to work interactively in Scheme. In a matter of moments, the Script-Fu Console will appear:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:119(title)
msgid "The Script-Fu Console Window"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:120(para)
msgid "At the bottom of this window is an entry-field ought to be entitled <guilabel>Current Command</guilabel>. Here, we can test out simple Scheme commands interactively. Let's start out easy, and add some numbers:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:126(programlisting)
#, no-wrap
msgid "(+ 3 5)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:127(para)
msgid "Typing this in and hitting <keycap>Enter</keycap> yields the expected answer of 8 in the center window."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:132(title)
msgid "Use Script-Fu Console."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:140(para)
msgid "Now, what if we wanted to add more than one number? The <quote>+</quote> function can take two or more arguments, so this is not a problem:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:145(programlisting)
#, no-wrap
msgid "(+ 3 5 6)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:146(para)
msgid "This also yields the expected answer of 14."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:147(para)
msgid "So far, so good &mdash; we type in a Scheme statement and it's executed immediately in the Script-Fu Console window. Now for a word of caution&hellip;"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:155(title)
msgid "Watch Out For Extra Parentheses"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:156(para)
msgid "If you're like me, you're used to being able to use extra parentheses whenever you want to &mdash; like when you're typing a complex mathematical equation and you want to separate the parts by parentheses to make it clearer when you read it. In Scheme, you have to be careful and not insert these extra parentheses incorrectly. For example, say we wanted to add 3 to the result of adding 5 and 6 together:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:165(programlisting)
#, no-wrap
msgid "3 + (5 + 6) + 7 = ?"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:166(para)
msgid "Knowing that the + operator can take a list of numbers to add, you might be tempted to convert the above to the following:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:170(programlisting)
#, no-wrap
msgid "(+ 3 (5 6) 7)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:171(para)
msgid "However, this is incorrect &mdash; remember, every statement in Scheme starts and ends with parens, so the Scheme interpreter will think that you're trying to call a function named <quote>5</quote> in the second group of parens, rather than summing those numbers before adding them to 3."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:178(para)
msgid "The correct way to write the above statement would be:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:179(programlisting)
#, no-wrap
msgid "(+ 3 (+ 5 6) 7)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:183(title)
msgid "Make Sure You Have The Proper Spacing, Too"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:184(para)
msgid "If you are familiar with other programming languages, like C/C++, Perl or Java, you know that you don't need white space around mathematical operators to properly form an expression:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:190(literal)
msgid "3+5, 3 +5, 3+ 5"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:192(para)
msgid "These are all accepted by C/C++, Perl and Java compilers. However, the same is not true for Scheme. You must have a space after a mathematical operator (or any other function name or operator) in Scheme for it to be correctly interpreted by the Scheme interpreter."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:198(para)
msgid "Practice a bit with simple mathematical equations in the Script-Fu Console until you're totally comfortable with these initial concepts."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:206(title)
msgid "Variables And Functions"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:207(para)
msgid "Now that we know that every Scheme statement is enclosed in parentheses, and that the function name/operator is listed first, we need to know how to create and use variables, and how to create and use functions. We'll start with the variables."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:215(title)
msgid "Declaring Variables"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:216(para)
msgid "Although there are a couple of different methods for declaring variables, the preferred method is to use the <command>let*</command> construct. If you're familiar with other programming languages, this construct is equivalent to defining a list of local variables and a scope in which they're active. As an example, to declare two variables, a and b, initialized to 1 and 2, respectively, you'd write:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:225(programlisting)
#, no-wrap
msgid "\n        (let*\n           (\n              (a 1)\n              (b 2)\n           )\n           (+ a b)\n        )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:234(para)
msgid "or, as one line:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:235(programlisting)
#, no-wrap
msgid "(let* ( (a 1) (b 2) ) (+ a b) )"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:237(para)
msgid "You'll have to put all of this on one line if you're using the console window. In general, however, you'll want to adopt a similar practice of indentation to help make your scripts more readable. We'll talk a bit more about this in the section on White Space."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:244(para)
msgid "This declares two local variables, a and b, initializes them, then prints the sum of the two variables."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:251(title)
msgid "What Is A Local Variable?"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:252(para)
msgid "You'll notice that we wrote the summation <code>(+ a b)</code> within the parens of the <code>let*</code> expression, not after it."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:256(para)
msgid "This is because the <code>let*</code> statement defines an area in your script in which the declared variables are usable; if you type the <userinput>(+ a b)</userinput> statement after the <userinput>(let* &hellip;)</userinput> statement, you'll get an error, because the declared variables are only valid within the context of the <code>let*</code> statement; they are what programmers call local variables."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:268(title)
msgid "The General Syntax Of <code>let*</code>"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:269(para)
msgid "The general form of a <code>let*</code> statement is:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:270(programlisting)
#, no-wrap
msgid "\n        (let* ( <replaceable>variables</replaceable> )\n          <replaceable>expressions</replaceable> )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:274(para)
msgid "where variables are declared within parens, e.g., <userinput>(a 2)</userinput>, and expressions are any valid Scheme expressions. Remember that the variables declared here are only valid within the <code>let*</code> statement &mdash; they're local variables."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:284(title)
msgid "White Space"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:285(para)
msgid "Previously, we mentioned the fact that you'll probably want to use indentation to help clarify and organize your scripts. This is a good policy to adopt, and is not a problem in Scheme &mdash; white space is ignored by the Scheme interpreter, and can thus be liberally applied to help clarify and organize the code within a script. However, if you're working in Script-Fu's Console window, you'll have to enter an entire expression on one line; that is, everything between the opening and closing parens of an expression must come on one line in the Script-Fu Console window."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:299(title)
msgid "Assigning A New Value To A Variable"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:300(para)
msgid "Once you've initialized a variable, you might need to change its value later on in the script. Use the <code>set!</code> statement to change the variable's value:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:305(programlisting)
#, no-wrap
msgid "\n        (let* ( (theNum 10) ) (set! theNum (+ theNum theNum)) )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:308(para)
msgid "Try to guess what the above statement will do, then go ahead and enter it in the Script-Fu Console window."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:313(para)
msgid "The <quote><code>\\</code></quote> indicates that there is no line break. Ignore it (don't type it in your Script-Fu console and don't hit <keycap>Enter</keycap>), just continue with the next line."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:322(title)
msgid "Functions"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:323(para)
msgid "Now that you've got the hang of variables, let's get to work with some functions. You declare a function with the following syntax:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:327(programlisting)
#, no-wrap
msgid "\n        (define\n           (\n              <replaceable>name</replaceable>\n              <replaceable>param-list</replaceable>\n           )\n           <replaceable>expressions</replaceable>\n        )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:336(para)
msgid "where <replaceable>name</replaceable> is the name assigned to this function, <replaceable>param-list</replaceable> is a space-delimited list of parameter names, and <replaceable>expressions</replaceable> is a series of expressions that the function executes when it's called. For example:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:343(programlisting)
#, no-wrap
msgid "(define (AddXY inX inY) (+ inX inY) )"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:344(para)
msgid "<varname>AddXY</varname> is the function's name and <varname>inX</varname> and <varname>inY</varname> are the variables. This function takes its two parameters and adds them together."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:350(para)
msgid "If you've programmed in other imperative languages (like C/C++, Java, Pascal, etc.), you might notice that a couple of things are absent in this function definition when compared to other programming languages."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:357(para)
msgid "First, notice that the parameters don't have any <quote>types</quote> (that is, we didn't declare them as strings, or integers, etc.). Scheme is a type-less language. This is handy and allows for quicker script writing."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:366(para)
msgid "Second, notice that we don't need to worry about how to <quote>return</quote> the result of our function &mdash; the last statement is the value <quote>returned</quote> when calling this function. Type the function into the console, then try something like:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:373(programlisting)
#, no-wrap
msgid "(AddXY (AddXY 5 6) 4)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:380(title)
msgid "Lists, Lists And More Lists"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:381(para)
msgid "We've trained you in variables and functions, and now enter the murky swamps of Scheme's lists."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:387(title)
msgid "Defining A List"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:388(para)
msgid "Before we talk more about lists, it is necessary that you know the difference between atomic values and lists."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:392(para)
msgid "You've already seen atomic values when we initialized variables in the previous lesson. An atomic value is a single value. So, for example, we can assign the variable <quote><varname>x</varname></quote> the single value of 8 in the following statement:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:399(programlisting)
#, no-wrap
msgid "(let* ( (x 8) ) x)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:400(para)
msgid "(We added the expression <varname>x</varname> at the end to print out the value assigned to <varname>x</varname>&mdash;normally you won't need to do this. Notice how <code>let*</code> operates just like a function: The value of the last statement is the value returned.)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:406(para)
msgid "A variable may also refer to a list of values, rather than a single value. To assign the variable <varname>x</varname> the list of values 1, 3, 5, we'd type:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:411(programlisting)
#, no-wrap
msgid "(let* ( (x '(1 3 5))) x)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:412(para)
msgid "Try typing both statements into the Script-Fu Console and notice how it replies. When you type the first statement in, it simply replies with the result:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:417(programlisting)
#, no-wrap
msgid "8"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:418(para)
msgid "However, when you type in the other statement, it replies with the following result:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:422(programlisting)
#, no-wrap
msgid "(1 3 5)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:423(para)
msgid "When it replies with the value 8 it is informing you that <varname>x</varname> contains the atomic value 8. However, when it replies with <computeroutput>(1 3 5)</computeroutput>, it is then informing you that <varname>x</varname> contains not a single value, but a list of values. Notice that there are no commas in our declaration or assignment of the list, nor in the printed result."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:432(para)
msgid "The syntax to define a list is:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:433(programlisting)
#, no-wrap
msgid "'(a b c)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:434(para)
msgid "where <varname>a</varname>, <varname>b</varname>, and <varname>c</varname> are literals. We use the apostrophe (<code>'</code>) to indicate that what follows in the parentheses is a list of literal values, rather than a function or expression."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:441(para)
msgid "An empty list can be defined as such:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:442(programlisting)
#, no-wrap
msgid "'()"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:443(para)
msgid "or simply:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:444(programlisting) ./src/using/script-fu-tutorial.xml:564(programlisting)
#, no-wrap
msgid "()"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:445(para)
msgid "Lists can contain atomic values, as well as other lists:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:446(programlisting)
#, no-wrap
msgid "\n(let*\n   (\n        (x\n           '(\"GIMP\" (1 2 3) (\"is\" (\"great\" () ) ) )\n        )\n    )\n    x\n)\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:456(para)
msgid "Notice that after the first apostrophe, you no longer need to use an apostrophe when defining the inner lists. Go ahead and copy the statement into the Script-Fu Console and see what it returns."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:461(para)
msgid "You should notice that the result returned is not a list of single, atomic values; rather, it is a list of a literal <code>(\"The GIMP\")</code>, the list <code>(1 2 3)</code>, etc."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:469(title)
msgid "How To Think Of Lists"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:470(para)
msgid "It's useful to think of lists as composed of a <quote>head</quote> and a <quote>tail</quote>. The head is the first element of the list, the tail the rest of the list. You'll see why this is important when we discuss how to add to lists and how to access elements in the list."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:480(title)
msgid "Creating Lists Through Concatenation (The Cons Function)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:481(para)
msgid "One of the more common functions you'll encounter is the cons function. It takes a value and places it to its second argument, a list. From the previous section, I suggested that you think of a list as being composed of an element (the head) and the remainder of the list (the tail). This is exactly how cons functions &mdash; it adds an element to the head of a list. Thus, you could create a list as follows:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:490(programlisting)
#, no-wrap
msgid "(cons 1 '(2 3 4) )"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:491(para)
msgid "The result is the list <code>(1 2 3 4)</code>."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:492(para)
msgid "You could also create a list with one element:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:493(programlisting)
#, no-wrap
msgid "(cons 1 () )"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:494(para)
msgid "You can use previously declared variables in place of any literals, as you would expect."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:501(title)
msgid "Defining A List Using The <code>list</code> Function"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:502(para)
msgid "To define a list composed of literals or previously declared variables, use the <function>list</function> function:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:506(programlisting)
#, no-wrap
msgid "(list 5 4 3 a b c)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:507(para)
msgid "This will compose and return a list containing the values held by the variables <varname>a</varname>, <varname>b</varname> and <varname>c</varname>. For example:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:512(programlisting)
#, no-wrap
msgid "\n        (let*  (\n                  (a 1)\n                  (b 2)\n                  (c 3)\n               )\n\n               (list 5 4 3 a b c)\n        )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:522(para)
msgid "This code creates the list <code>(5 4 3 1 2 3)</code>."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:528(title)
msgid "Accessing Values In A List"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:529(para)
msgid "To access the values in a list, use the functions <function>car</function> and <function>cdr</function>, which return the first element of the list and the rest of the list, respectively. These functions break the list down into the head::tail construct I mentioned earlier."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:539(title)
msgid "The <function>car</function> Function"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:540(para)
msgid "<function>car</function> returns the first element of the list (the head of the list). The list needs to be non-null. Thus, the following returns the first element of the list:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:545(programlisting)
#, no-wrap
msgid "(car '(\"first\" 2 \"third\"))"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:546(para)
msgid "which is:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:547(programlisting)
#, no-wrap
msgid "\"first\""
msgstr ""

#: ./src/using/script-fu-tutorial.xml:551(title)
msgid "The <function>cdr</function> function"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:552(para)
msgid "<function>cdr</function> returns the rest of the list after the first element (the tail of the list). If there is only one element in the list, it returns an empty list."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:558(programlisting)
#, no-wrap
msgid "(cdr '(\"first\" 2 \"third\"))"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:559(para) ./src/using/script-fu-tutorial.xml:563(para)
msgid "returns:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:560(programlisting)
#, no-wrap
msgid "(2 \"third\")"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:561(para)
msgid "whereas the following:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:562(programlisting)
#, no-wrap
msgid "(cdr '(\"one and only\"))"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:568(title)
msgid "Accessing Other Elements In A List"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:569(para)
msgid "OK, great, we can get the first element in a list, as well as the rest of the list, but how do we access the second, third or other elements of a list? There exist several \"convenience\" functions to access, for example, the head of the head of the tail of a list (<code>caadr</code>), the tail of the tail of a list (<code>cddr</code>), etc."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:577(para)
msgid "The basic naming convention is easy: The a's and d's represent the heads and tails of lists, so"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:581(programlisting)
#, no-wrap
msgid "(car (cdr (car x) ) )"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:582(para)
msgid "could be written as:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:583(programlisting)
#, no-wrap
msgid "(cadar x)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:584(para)
msgid "To get some practice with list-accessing functions, try typing in the following (except all on one line if you're using the console); use different variations of <function>car</function> and <function>cdr</function> to access the different elements of the list:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:590(programlisting)
#, no-wrap
msgid "\n        (let* (\n                 (x  '( (1 2 (3 4 5) 6)  7  8  (9 10) )\n                 )\n              )\n              ; place your car/cdr code here\n        )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:598(para)
msgid "Try accessing the number 3 in the list using only two function calls. If you can do that, you're on your way to becoming a Script-Fu Master!"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:604(para)
msgid "In Scheme, a semicolon (<code>;</code>) marks a comment. It, and anything that follows it on the same line, are ignored by the script interpreter, so you can use this to add comments to jog your memory when you look at the script later."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:615(title)
msgid "Your First Script-Fu Script"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:616(para)
msgid "Do you not need to stop and catch your breath? No? Well then, let's proceed with your fourth lesson &mdash; your first Script-Fu Script."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:623(title)
msgid "Creating A Text Box Script"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:624(para)
msgid "One of the most common operations I perform in <acronym>GIMP</acronym> is creating a box with some text in it for a web page, a logo or whatever. However, you never quite know how big to make the initial image when you start out. You don't know how much space the text will fill with the font and font size you want."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:632(para)
msgid "The Script-Fu Master (and student) will quickly realize that this problem can easily be solved and automated with Script-Fu."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:637(para)
msgid "We will, therefore, create a script, called Text Box, which creates an image correctly sized to fit snugly around a line of text the user inputs. We'll also let the user choose the font, font size and text color."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:646(title)
msgid "Editing And Storing Your Scripts"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:647(para)
msgid "Up until now, we've been working in the Script-Fu Console. Now, however, we're going to switch to editing script text files."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:651(para)
msgid "Where you place your scripts is a matter of preference &mdash; if you have access to <acronym>GIMP</acronym>'s default script directory, you can place your scripts there. However, I prefer keeping my personal scripts in my own script directory, to keep them separate from the factory-installed scripts."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:658(para)
msgid "In the <filename class=\"directory\">.gimp-2.8</filename> directory that <acronym>GIMP</acronym> made off of your home directory, you should find a directory called <filename class=\"directory\">scripts</filename>. <acronym>GIMP</acronym> will automatically look in your <filename class=\"directory\">.gimp-2.8</filename> directory for a <filename class=\"directory\">scripts</filename> directory, and add the scripts in this directory to the Script-Fu database. You should place your personal scripts here."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:671(title)
msgid "The Bare Essentials"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:672(para)
msgid "Every Script-Fu script defines at least one function, which is the script's main function. This is where you do the work."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:676(para)
msgid "Every script must also register with the procedural database, so you can access it within <acronym>GIMP</acronym>."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:680(para)
msgid "We'll define the main function first:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:681(programlisting)
#, no-wrap
msgid "\n        (define (script-fu-text-box inText inFont inFontSize inTextColor))\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:684(para)
msgid "Here, we've defined a new function called <function>script-fu-text-box</function> that takes four parameters, which will later correspond to some text, a font, the font size, and the text's color. The function is currently empty and thus does nothing. So far, so good &mdash; nothing new, nothing fancy."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:695(title)
msgid "Naming Conventions"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:696(para)
msgid "Scheme's naming conventions seem to prefer lowercase letters with hyphens, which I've followed in the naming of the function. However, I've departed from the convention with the parameters. I like more descriptive names for my parameters and variables, and thus add the \"in\" prefix to the parameters so I can quickly see that they're values passed into the script, rather than created within it. I use the prefix \"the\" for variables defined within the script."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:705(para)
msgid "It's <acronym>GIMP</acronym> convention to name your script functions <function>script-fu-abc</function>, because then when they're listed in the procedural database, they'll all show up under script-fu when you're listing the functions. This also helps distinguish them from plug-ins."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:715(title)
msgid "Registering The Function"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:716(para)
msgid "Now, let's register the function with <acronym>GIMP</acronym>. This is done by calling the function <function>script-fu-register</function>. When <acronym>GIMP</acronym> reads in a script, it will execute this function, which registers the script with the procedural database. You can place this function call wherever you wish in your script, but I usually place it at the end, after all my other code."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:725(para)
msgid "Here's the listing for registering this function (I will explain all its parameters in a minute):"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:749(para)
msgid "If you save these functions in a text file with a <filename class=\"extension\">.scm</filename> suffix in your script directory, then choose <menuchoice><guimenu>Filters</guimenu><guisubmenu>Script-Fu</guisubmenu><guimenuitem>Refresh Scripts</guimenuitem></menuchoice>, this new script will appear as <menuchoice><guimenu>File</guimenu><guisubmenu>Create</guisubmenu><guisubmenu>Text</guisubmenu><guimenuitem>Text Box</guimenuitem></menuchoice>."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:766(para)
msgid "If you invoke this new script, it won't do anything, of course, but you can view the prompts you created when registering the script (more information about what we did is covered next)."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:771(para)
msgid "Finally, if you invoke the Procedure Browser ( <menuchoice><guimenu>Help</guimenu><guimenuitem>Procedure Browser</guimenuitem></menuchoice>), you'll notice that our script now appears in the database."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:782(title)
msgid "Steps For Registering The Script"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:783(para)
msgid "To register our script with <acronym>GIMP</acronym>, we call the function <function>script-fu-register</function>, fill in the seven required parameters and add our script's own parameters, along with a description and default value for each parameter."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:790(title)
msgid "The Required Parameters"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:792(para)
msgid "The <emphasis>name</emphasis> of the function we defined. This is the function called when our script is invoked (the entry-point into our script). This is necessary because we may define additional functions within the same file, and <acronym>GIMP</acronym> needs to know which of these functions to call. In our example, we only defined one function, text-box, which we registered."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:807(para)
msgid "Before version 2.6, <code>&lt;Toolbox&gt;</code> could be also used, but now the toolbox menu is removed, so don't use it."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:803(para)
msgid "The <emphasis>location</emphasis> in the menu where the script will be inserted. The exact location of the script is specified like a path in Unix, with the root of the path being image menu as <code>&lt;Image&gt;</code>.<placeholder-1/>"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:812(para)
msgid "If your script does not operate on an existing image (and thus creates a new image, like our Text Box script will), you'll want to insert it in the image window menu, which you can access through the image menu bar, by right-clicking the image window, by clicking the menu button icon at the left-top corner of the image window, or by pressing <keycap>F10</keycap>."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:827(para)
msgid "The original, written by Mike, says put the menu entry in the Script-Fu menu of the <guimenu>Xtns</guimenu> menu at the Toolbox, but since version 2.6, the Toolbox menu had been removed and merged with the image window menubar."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:820(para)
msgid "If your script is intended to work on an image being edited, you'll want to insert it in the image window menu. The rest of the path points to the menu lists, menus and sub-menus. Thus, we registered our Text Box script in the <guisubmenu>Text</guisubmenu> menu of the <guisubmenu>Create</guisubmenu> menu of the <guimenu>File</guimenu> menu.<placeholder-1/> (<menuchoice><guimenu>File</guimenu><guisubmenu>Create</guisubmenu><guisubmenu>Text</guisubmenu><guimenuitem>Text Box</guimenuitem></menuchoice>)."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:840(para)
msgid "If you notice, the Text sub-menu in the File/Create menu wasn't there when we began &mdash;<acronym>GIMP</acronym> automatically creates any menus not already existing."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:847(para)
msgid "A <emphasis>description</emphasis> of your script, to be displayed in the Procedure Browser."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:853(para)
msgid "<emphasis>Your name</emphasis> (the author of the script)."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:858(para)
msgid "<emphasis>Copyright</emphasis> information."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:861(para)
msgid "The <emphasis>date</emphasis> the script was made, or the last revision of the script."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:867(para)
msgid "The <emphasis>types</emphasis> of images the script works on. This may be any of the following: RGB, RGBA, GRAY, GRAYA, INDEXED, INDEXEDA. Or it may be none at all &mdash; in our case, we're creating an image, and thus don't need to define the type of image on which we work."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:878(title)
msgid "The menu of our script."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:889(title)
msgid "Registering The Script's Parameters"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:890(para)
msgid "Once we have listed the required parameters, we then need to list the parameters that correspond to the parameters our script needs. When we list these params, we give hints as to what their types are. This is for the dialog which pops up when the user selects our script. We also provide a default value."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:897(para)
msgid "This section of the registration process has the following format:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:905(para)
msgid "Param Type"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:908(para)
msgid "Description"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:911(para)
msgid "Example"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:918(constant)
msgid "SF-IMAGE"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:921(para)
msgid "If your script operates on an open image, this should be the first parameter after the required parameters. <acronym>GIMP</acronym> will pass in a reference to the image in this parameter."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:929(para)
msgid "3"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:934(constant)
msgid "SF-DRAWABLE"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:937(para)
msgid "If your script operates on an open image, this should be the second parameter after the <constant>SF-IMAGE</constant> param. It refers to the active layer. <acronym>GIMP</acronym> will pass in a reference to the active layer in this parameter."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:946(para)
msgid "17"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:951(constant)
msgid "SF-VALUE"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:954(para)
msgid "Accepts numbers and strings. Note that quotes must be escaped for default text, so better use <constant>SF-STRING</constant>."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:961(para)
msgid "42"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:966(constant)
msgid "SF-STRING"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:969(para)
msgid "Accepts strings."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:972(para)
msgid "\"Some text\""
msgstr ""

#: ./src/using/script-fu-tutorial.xml:977(constant)
msgid "SF-COLOR"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:980(para)
msgid "Indicates that a color is requested in this parameter."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:985(para)
msgid "'(0 102 255)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:990(constant)
msgid "SF-TOGGLE"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:993(para)
msgid "A checkbox is displayed, to get a Boolean value."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:998(para)
msgid "TRUE or FALSE"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1009(title)
msgid "Giving Our Script Some Guts"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1010(para)
msgid "Let us continue with our training and add some functionality to our script."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1016(title)
msgid "Creating A New Image"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1017(para)
msgid "In the previous lesson, we created an empty function and registered it with <acronym>GIMP</acronym>. In this lesson, we want to provide functionality to our script &mdash; we want to create a new image, add the user's text to it and resize the image to fit the text exactly."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1023(para)
msgid "Once you know how to set variables, define functions and access list members, the rest is all downhill &mdash; all you need to do is familiarize yourself with the functions available in <acronym>GIMP</acronym>'s procedural database and call those functions directly. So fire up the <xref linkend=\"plug-in-dbbrowser\"/> and let's get cookin'!"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1031(para)
msgid "Let's begin by making a new image. We'll create a new variable, <varname>theImage</varname>, set to the result of calling <acronym>GIMP</acronym>'s built-in function <function>gimp-image-new</function>."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1037(para)
msgid "As you can see from the DB Browser, the function <function>gimp-image-new</function> takes three parameters &mdash; the image's width, height and the type of image. Because we'll later resize the image to fit the text, we'll make a 10x10 pixels <acronym>RGB</acronym> image. We'll store the image's width and sizes in some variables, too, as we'll refer to and manipulate them later in the script."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1047(programlisting)
#, no-wrap
msgid "\n        (define (script-fu-text-box inText inFont inFontSize inTextColor)\n        (let*\n              (\n                 ; define our local variables\n                 ; create a new image:\n                 (theImageWidth  10)\n                 (theImageHeight 10)\n                 (theImage (car\n                                (gimp-image-new\n                                 theImageWidth\n                                 theImageHeight\n                                 RGB\n                                )\n                           )\n                 )\n                 (theText)     ;a declaration for the text\n                               ;we create later\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1066(para)
msgid "Note: We used the value <code>RGB</code> to specify that the image is an <acronym>RGB</acronym> image. We could have also used <code>0</code>, but <acronym>RGB</acronym> is more descriptive when we glance at the code."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1072(para)
msgid "You should also notice that we took the head of the result of the function call. This may seem strange, because the database explicitly tells us that it returns only one value &mdash; the ID of the newly created image. However, all <acronym>GIMP</acronym> functions return a list, even if there is only one element in the list, so we need to get the head of the list."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1083(title)
msgid "Adding A New Layer To The Image"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1084(para)
msgid "Now that we have an image, we need to add a layer to it. We'll call the <function>gimp-layer-new</function> function to create the layer, passing in the ID of the image we just created. (From now on, instead of listing the complete function, we'll only list the lines we're adding to it. You can see the complete script <link linkend=\"gimp-using-script-fu-tutorial-result\">here</link>.) Because we've declared all of the local variables we'll use, we'll also close the parentheses marking the end of our variable declarations:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1096(programlisting)
#, no-wrap
msgid "\n        ;create a new layer for the image:\n           (theLayer\n                     (car\n                          (gimp-layer-new\n                           theImage\n                           theImageWidth\n                           theImageHeight\n                           RGB-IMAGE\n                           \"layer 1\"\n                           100\n                           NORMAL\n                          )\n                      )\n            )\n         ) ;end of our local variables\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1113(para)
msgid "Once we have the new layer, we need to add it to the image:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1114(programlisting)
#, no-wrap
msgid "\n        (gimp-image-add-layer theImage theLayer 0)\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1117(para)
msgid "Now, just for fun, let's see the fruits of our labors up until this point, and add this line to show the new, empty image:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1121(programlisting)
#, no-wrap
msgid "(gimp-display-new theImage)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1122(para)
msgid "Save your work, select <menuchoice><guimenu>Filters</guimenu><guisubmenu>Script-Fu</guisubmenu><guimenuitem>Refresh Scripts</guimenuitem></menuchoice>, run the script and a new image should pop up. It will probably contain garbage (random colors), because we haven't erased it. We'll get to that in a second."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1136(title)
msgid "Adding The Text"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1137(para)
msgid "Go ahead and remove the line to display the image (or comment it out with a (<code>;</code>) as the first character of the line)."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1141(para)
msgid "Before we add text to the image, we need to set the background and foreground colors so that the text appears in the color the user specified. We'll use the gimp-context-set-back/foreground functions:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1147(programlisting)
#, no-wrap
msgid "\n        (gimp-context-set-background '(255 255 255) )\n        (gimp-context-set-foreground inTextColor)\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1151(para)
msgid "With the colors properly set, let's now clean out the garbage currently in the image by filling the drawable with the background color:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1156(programlisting)
#, no-wrap
msgid "\n        (gimp-drawable-fill theLayer BACKGROUND-FILL)\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1159(para)
msgid "With the image cleared, we're ready to add some text:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1160(programlisting)
#, no-wrap
msgid "\n        (set! theText\n                      (car\n                           (gimp-text-fontname\n                            theImage theLayer\n                            0 0\n                            inText\n                            0\n                            TRUE\n                            inFontSize PIXELS\n                            \"Sans\")\n                       )\n        )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1174(para)
msgid "Although a long function call, it's fairly straightforward if you go over the parameters while looking at the function's entry in the DB Browser. Basically, we're creating a new text layer and assigning it to the variable <varname>theText</varname>."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1181(para)
msgid "Now that we have the text, we can grab its width and height and resize the image and the image's layer to the text's size:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1185(programlisting)
#, no-wrap
msgid "\n        (set! theImageWidth   (car (gimp-drawable-width  theText) ) )\n        (set! theImageHeight  (car (gimp-drawable-height theText) ) )\n\n        (gimp-image-resize theImage theImageWidth theImageHeight 0 0)\n\n        (gimp-layer-resize theLayer theImageWidth theImageHeight 0 0)\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1193(para)
msgid "If you're like me, you're probably wondering what a drawable is when compared to a layer. The difference between the two is that a drawable is anything that can be drawn into, including layers but also channels, layer masks, the selection, etc; a layer is a more specific version of a drawable. In most cases, the distinction is not important."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1201(para)
msgid "With the image ready to go, we can now re-add our display line:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1204(programlisting)
#, no-wrap
msgid "\n        (gimp-display-new theImage)\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1207(para)
msgid "Save your work, refresh the database and give your first script a run!"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1213(title)
msgid "Clearing The Dirty Flag"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1214(para)
msgid "If you try to close the image created without first saving the file, <acronym>GIMP</acronym> will ask you if you want to save your work before you close the image. It asks this because the image is marked as dirty, or unsaved. In the case of our script, this is a nuisance for the times when we simply give it a test run and don't add or change anything in the resulting image &mdash; that is, our work is easily reproducible in such a simple script, so it makes sense to get rid of this dirty flag."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1224(para)
msgid "To do this, we can clear the dirty flag after displaying the image:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1227(programlisting)
#, no-wrap
msgid "\n        (gimp-image-clean-all theImage)\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1230(para)
msgid "This will set dirty count to 0, making it appear to be a <quote>clean</quote> image."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1234(para)
msgid "Whether to add this line or not is a matter of personal taste. I use it in scripts that produce new images, where the results are trivial, as in this case. If your script is very complicated, or if it works on an existing image, you will probably not want to use this function."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1244(title)
msgid "Extending The Text Box Script"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1246(title)
msgid "Handling Undo Correctly"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1247(para)
msgid "When creating a script, you want to give your users the ability to undo their actions, should they make a mistake. This is easily accomplished by calling the functions <function>gimp-undo-push-group-start</function> and <function>gimp-undo-push-group-end</function> around the code that manipulates the image. You can think of them as matched statements that let <acronym>GIMP</acronym> know when to start and stop recording manipulations on the image, so that those manipulations can later be undone."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1258(para)
msgid "If you are creating a new image entirely, it doesn't make sense to use these functions because you're not changing an existing image. However, when you are changing an existing image, you most surely want to use these functions."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1264(para)
msgid "Undoing a script works nearly flawlessly when using these functions."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1270(title)
msgid "Extending The Script A Little More"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1271(para)
msgid "Now that we have a very handy-dandy script to create text boxes, let's add two features to it:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1277(para)
msgid "Currently, the image is resized to fit exactly around the text &mdash; there's no room for anything, like drop shadows or special effects (even though many scripts will automatically resize the image as necessary). Let's add a buffer around the text, and even let the user specify how much buffer to add as a percentage of the size of the resultant text."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1287(para)
msgid "This script could easily be used in other scripts that work with text. Let's extend it so that it returns the image and the layers, so other scripts can call this script and use the image and layers we create."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1298(title)
msgid "Modifying The Parameters And The Registration Function"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1301(para)
msgid "To let the user specify the amount of buffer, we'll add a parameter to our function and the registration function:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1305(programlisting)
#, no-wrap
msgid "\n  (define (script-fu-text-box inTest inFont inFontSize inTextColor inBufferAmount)\n  (let*\n        (\n           ; define our local variables\n           ; create a new image:\n           (theImageWidth  10)\n           (theImageHeight 10)\n           (theImage (car\n                          (gimp-image-new\n                           theImageWidth\n                           theImageHeight\n                           RGB\n                          )\n                     )\n           )\n           (theText)          ;a declaration for the text\n                              ;we create later\n\n           (theBuffer)        ;<emphasis>added</emphasis>\n\n           (theLayer\n                     (car\n                         (gimp-layer-new\n                          theImage\n                          theImageWidth\n                          theImageHeight\n                          RGB-IMAGE\n                          \"layer 1\"\n                          100\n                          NORMAL\n                         )\n                     )\n           )\n        ) ;end of our local variables\n\n   <replaceable>[Code here]</replaceable>\n )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1369(title)
msgid "Adding The New Code"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1370(para)
msgid "We're going to add code in two places: right before we resize the image, and at the end of the script (to return the new image, the layer and the text)."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1375(para)
msgid "After we get the text's height and width, we need to resize these values based on the buffer amount specified by the user. We won't do any error checking to make sure it's in the range of 0-100% because it's not life-threatening, and because there's no reason why the user can't enter a value like <quote>200</quote> as the percent of buffer to add."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1383(programlisting)
#, no-wrap
msgid "\n        (set! theBuffer (* theImageHeight (/ inBufferAmount 100) ) )\n\n        (set! theImageHeight (+ theImageHeight theBuffer theBuffer) )\n        (set! theImageWidth  (+ theImageWidth  theBuffer theBuffer) )\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1389(para)
msgid "All we're doing here is setting the buffer based on the height of the text, and adding it twice to both the height and width of our new image. (We add it twice to both dimensions because the buffer needs to be added to both sides of the text.)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1395(para)
msgid "Now that we have resized the image to allow for a buffer, we need to center the text within the image. This is done by moving it to the (x, y) coordinates of (<varname>theBuffer</varname>, <varname>theBuffer</varname>). I added this line after resizing the layer and the image:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1402(programlisting)
#, no-wrap
msgid "\n        (gimp-layer-set-offsets theText theBuffer theBuffer)\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1405(para)
msgid "Go ahead and save your script, and try it out after refreshing the database."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1409(para)
msgid "All that is left to do is return our image, the layer, and the text layer. After displaying the image, we add this line:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1413(programlisting)
#, no-wrap
msgid "(list theImage theLayer theText)"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1414(para)
msgid "This is the last line of the function, making this list available to other scripts that want to use it."
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1418(para)
msgid "To use our new text box script in another script, we could write something like the following:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1422(programlisting)
#, no-wrap
msgid "\n        (set! theResult (script-fu-text-box\n                         \"Some text\"\n                         \"Charter\" \"30\"\n                         '(0 0 0)\n                         \"35\"\n                        )\n        )\n        (gimp-image-flatten (car theResult))\n      "
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1432(para)
msgid "Congratulations, you are on your way to your Black Belt of Script-Fu!"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1439(title)
msgid "Your script and its working"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1441(title)
msgid "What you write"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1442(para)
msgid "Below the complete script:"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1529(title)
msgid "What you obtain"
msgstr ""

#: ./src/using/script-fu-tutorial.xml:1531(title)
msgid "And the result on the screen."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: ./src/using/script-fu-tutorial.xml:0(None)
msgid "translator-credits"
msgstr ""

