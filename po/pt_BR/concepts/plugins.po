msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-10-30 04:03-0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ./src/concepts/plugins.xml:12(title) ./src/concepts/plugins.xml:14(primary) ./src/concepts/plugins.xml:155(primary) ./src/concepts/plugins.xml:287(primary)
msgid "Plugins"
msgstr ""

#: ./src/concepts/plugins.xml:15(secondary) ./src/concepts/plugins.xml:18(title)
msgid "Introduction"
msgstr ""

#: ./src/concepts/plugins.xml:19(para)
msgid "One of the nicest things about <acronym>GIMP</acronym> is how easily its functionality can be extended, by using plugins. <acronym>GIMP</acronym> plugins are external programs that run under the control of the main <acronym>GIMP</acronym> application and interact with it very closely. Plugins can manipulate images in almost any way that users can. Their advantage is that it is much easier to add a capability to <acronym>GIMP</acronym> by writing a small plugin than by modifying the huge mass of complex code that makes up the <acronym>GIMP</acronym> core. Many valuable plugins have C source code that only comes to 100-200 lines or so."
msgstr ""

#: ./src/concepts/plugins.xml:31(para)
msgid "Several dozen plugins are included in the main <acronym>GIMP</acronym> distribution, and installed automatically along with <acronym>GIMP</acronym>. Most of them can be accessed through the <guimenu>Filters</guimenu> menu (in fact, everything in that menu is a plugin), but a number are located in other menus. In many cases you can use one without ever realizing that it is a plugin: for example, the \"Normalize\" function for automatic color correction is actually a plugin, although there is nothing about the way it works that would tell you this."
msgstr ""

#: ./src/concepts/plugins.xml:42(para)
msgid "In addition to the plugins included with <acronym>GIMP</acronym> , many more are available on the net. A large number can be found at the <acronym>GIMP</acronym> Plugin Registry <xref linkend=\"bibliography-online-gimp-plugin-registry\"/>, a web site whose purpose is to provide a central repository for plugins. Creators of plugins can upload them there; users in search of plugins for a specific purpose can search the site in a variety of ways."
msgstr ""

#: ./src/concepts/plugins.xml:51(para)
msgid "Anybody in the world can write a <acronym>GIMP</acronym> plugin and make it available over the web, either via the Registry or a personal web site, and many very valuable plugins can be obtained in this way Â­ some are described elsewhere in the User's Manual. With this freedom from constraint comes a certain degree of risk, though: the fact that anybody can do it means that there is no effective quality control. The plugins distributed with <acronym>GIMP</acronym> have all been tested and tuned by the developers, but many that you can download were just hacked together in a few hours and then tossed to the winds. Some plugin creators just don't care about robustness, and even for those who do, their ability to test on a variety of systems in a variety of situations is often quite limited. Basically, when you download a plugin, you are getting something for free, and sometimes you get exactly what you pay for. This is not said in an attempt to discourage you, just to make sure you understand reality."
msgstr ""

#: ./src/concepts/plugins.xml:69(para)
msgid "Plugins, being full-fledged executable programs, can do any of the things that any other program can do, including install back-doors on your system or otherwise compromise its security. Don't install a plugin unless it comes from a trusted source."
msgstr ""

#: ./src/concepts/plugins.xml:76(para)
msgid "These caveats apply as much to the Plugin Registry as to any other source of plugins. The Registry is available to any plugin creator who wants to use it: there is no systematic oversight. Obviously if the maintainers became aware that something evil was there, they would remove it. (That hasn't happened yet.) There is, however, for <acronym>GIMP</acronym> and its plugins the same warranty as for any other free software: namely, none."
msgstr ""

#: ./src/concepts/plugins.xml:86(para)
msgid "Plugins have been a feature of <acronym>GIMP</acronym> for many versions. However, plugins written for one version of <acronym>GIMP</acronym> can hardly ever be used successfully with other versions. They need to be ported: sometimes this is easy, sometimes not. Many plugins are already available in several versions. Bottom line: before trying to install a plugin, make sure that it is written for your version of <acronym>GIMP</acronym>."
msgstr ""

#: ./src/concepts/plugins.xml:99(title)
msgid "Using Plugins"
msgstr ""

#: ./src/concepts/plugins.xml:100(para)
msgid "For the most part you can use a plugin like any other <acronym>GIMP</acronym> tool, without needing to be aware that it is a plugin. But there are a few things about plugins that are useful to understand."
msgstr ""

#: ./src/concepts/plugins.xml:106(para)
msgid "One is that plugins are generally not as robust as the <acronym>GIMP</acronym> core. When <acronym>GIMP</acronym> crashes, it is considered a very serious thing: it can cost the user a lot of trouble and headache. When a plugin crashes, the consequences are usually not so serious. In most cases you can just continuing working without worrying about it."
msgstr ""

#: ./src/concepts/plugins.xml:115(para)
msgid "Because plugins are separate programs, they communicate with the <acronym>GIMP</acronym> core in a special way: The <acronym>GIMP</acronym> developers call it <quote>talking over a wire</quote>. When a plugin crashes, the communication breaks down, and you will see an error message about a <quote>wire read error</quote>."
msgstr ""

#: ./src/concepts/plugins.xml:125(para)
msgid "When a plugin crashes, <acronym>GIMP</acronym> gives you a very ominous-looking message telling you that the plugin may have left <acronym>GIMP</acronym> in a corrupted state, and you should consider saving your images and exiting. Strictly speaking, this is quite correct, because plugins have the power to alter almost anything in <acronym>GIMP</acronym>, but for practical purposes, experience has shown that corruption is actually quite rare, and many users just continue working and don't worry about it. Our advice is that you simply think about how much trouble it would cause you if something went wrong, and weigh it against the odds."
msgstr ""

#: ./src/concepts/plugins.xml:138(para)
msgid "Because of the way plugins communicate with <acronym>GIMP</acronym>, they do not have any mechanism for being informed about changes you make to an image after the plugin has been started. If you start a plugin, and then alter the image using some other tool, the plugin will often crash, and when it doesn't will usually give a bogus result. You should avoid running more than one plugin at a time on an image, and avoid doing anything to the image until the plugin has finished working on it. If you ignore this advice, not only will you probably screw up the image, you will probably screw up the undo system as well, so that you won't even be able to recover from your foolishness."
msgstr ""

#: ./src/concepts/plugins.xml:153(title)
msgid "Installing New Plugins"
msgstr ""

#: ./src/concepts/plugins.xml:156(secondary)
msgid "Install"
msgstr ""

#: ./src/concepts/plugins.xml:158(para)
msgid "The plugins that are distributed with <acronym>GIMP</acronym> don't require any special installation. Plugins that you download yourself do. There are several scenarios, depending on what OS you are using and how the plugin is structured. In Linux it is usually pretty easy to install a new plugin; in Windows, it is either easy or very hard. In any case, the two are best considered separately."
msgstr ""

#: ./src/concepts/plugins.xml:167(title)
msgid "Linux / Unix-sytem like systems"
msgstr ""

#: ./src/concepts/plugins.xml:168(para)
msgid "Most plugins fall into two categories: small ones whose source code is distributed as a single .c file, and larger ones whose source code is distributed as a directory containing multiple files including a <filename>Makefile</filename>."
msgstr ""

#: ./src/concepts/plugins.xml:174(para)
msgid "For a simple one-file plugin, call it <filename>borker.c</filename>, installing it is just a matter of running the command <command>gimptool-2.0 --install borker.c</command>. This command compiles the plugin and installs it in your personal plugin directory, <filename>~/gimp-2.4/plugins</filename> unless you have changed it. This will cause it to be loaded automatically the next time you start <acronym>GIMP</acronym>. You don't need to be root to do these things; in fact, you shouldn't be. If the plugin fails to compile, well, be creative."
msgstr ""

#: ./src/concepts/plugins.xml:185(para)
msgid "Once you have installed the plugin, how do you activate it? The menu path is determined by the plugin itself, so to answer this you need to either look at the documentation for the plugin (if there is any), or launch the Plugin Description dialog (from Xtns/Plugins Details) search the plug-in by its name and look of the <guilabel>Tree view</guilabel> tab. If you still don't find, finally explore the menus or look at the source code in the Register section -- whichever is easiest."
msgstr ""

#: ./src/concepts/plugins.xml:195(para)
msgid "For more complex plugins, organized as a directory with multiple files, there ought to be a file inside called either <filename>INSTALL</filename> or <filename>README</filename>, with instructions. If not, the best advice is to toss the plugin in the trash and spend your time on something else: any code written with so little concern for the user is likely to be frustrating in myriad ways."
msgstr ""

#: ./src/concepts/plugins.xml:204(para)
msgid "Some plugins (specifically those based on the <acronym>GIMP</acronym> Plugin Template) are designed to be installed in the main system <acronym>GIMP</acronym> directory, rather than your home directory. For these, you will need to be root to perform the final stage of installation (when issuing the <command>make install</command> command)."
msgstr ""

#: ./src/concepts/plugins.xml:212(para)
msgid "If you install in your personal plugin directory a plugin that has the same name as one in the system plugin directory, only one can be loaded, and it will be the one in your home directory. You will receive messages telling you this each time you start <acronym>GIMP</acronym>. This is probably a situation best avoided."
msgstr ""

#: ./src/concepts/plugins.xml:222(title)
msgid "Windows"
msgstr ""

#: ./src/concepts/plugins.xml:223(para)
msgid "Windows is a much more problematic environment for building software than Linux. Every decent Linux distribution comes fully supplied with tools for compiling software, and they are all very similar in the way they work, but Windows does not come with such tools. It is possible to set up a good software-building environment in Windows, but it requires either a substantial amount of money or a substantial amount of effort and knowledge."
msgstr ""

#: ./src/concepts/plugins.xml:232(para)
msgid "What this means in relation to <acronym>GIMP</acronym> plugins is the following: either you have an environment in which you can build software, or you don't. If you don't, then your best hope is to find a precompiled version of the plugin somewhere (or persuade somebody to compile it for you), in which case you simply need to put it into your personal plugin directory. If you do have an environment in which you can build software (which for present purposes means an environment in which you can build <acronym>GIMP</acronym>), then you no doubt already know quite a bit about these things, and just need to follow the Linux instructions."
msgstr ""

#: ./src/concepts/plugins.xml:258(title)
msgid "Apple Mac OS X"
msgstr ""

#: ./src/concepts/plugins.xml:259(para)
msgid "How you install plugins on OS X mostly depends on how you installed <acronym>GIMP</acronym> itself. If you were one of the brave and installed <acronym>GIMP</acronym> through one of the package managers like fink <xref linkend=\"bibliography-online-darwinports\"/> or darwinports, <xref linkend=\"bibliography-online-fink\"/> the plugin installation works exactly the way it is described for the Linux platform already. The only difference is, that a couple of plugins might be even available in the repository of you package manager, so give it a try."
msgstr ""

#: ./src/concepts/plugins.xml:271(para)
msgid "If you on the other hand are one of the Users that preferred to grab a prebuild <acronym>GIMP</acronym> package like GIMP.app, you most probably want to stick to that prebuild stuff. So you can try to get a prebuild version of the plugin of you dreams from the author of the plugin, but I'd not want to bet on this. Building your own binaries unfortunately involves installing <acronym>GIMP</acronym> through one of the package managers mentioned above."
msgstr ""

#: ./src/concepts/plugins.xml:285(title)
msgid "Writing Plugins"
msgstr ""

#: ./src/concepts/plugins.xml:288(secondary)
msgid "Write"
msgstr ""

#: ./src/concepts/plugins.xml:290(para)
msgid "If you want to learn how to write a plugin, you can find plenty of help at the <acronym>GIMP</acronym> Developers web site <xref linkend=\"bibliography-online-gimp-dev-plugin\"/>. <acronym>GIMP</acronym> is a complex program, but the development team has made strenuous efforts to flatten the learning curve for plugin writing: there are good instructions and examples, and the main library that plugins use to interface with <acronym>GIMP</acronym> (called <quote>libgimp</quote>) has a well-documented <acronym>API</acronym>. Good programmers, learning by modifying existing plugins, are often able to accomplish interesting things after just a couple of days of work."
msgstr ""

#. Put one translator per line, in the form of NAME <EMAIL>, YEAR1, YEAR2
#: ./src/concepts/plugins.xml:0(None)
msgid "translator-credits"
msgstr ""

