<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                       "http://www.docbook.org/xml/4.3/docbookx.dtd">
<!-- section history:
     2008-06-07 ude: added new sections: Refresh, Console, Server
     2005-11-24 split of from menus-toolbox.xml by axel.wernicke
-->
<sect2 id="gimp-xtns-script-fu">
  <title>The <quote>Script-Fu</quote> Submenu</title>
  <indexterm>
    <primary>Script-Fu</primary>
    <secondary>Sub-menu</secondary>
  </indexterm>
  <figure>
    <title>
      The <quote>Script-Fu</quote> submenu of the Xtns menu
    </title>
    <mediaobject>
      <imageobject>
        <imagedata fileref="images/menus/script-fu.png" format="PNG"/>
      </imageobject>
    </mediaobject>
  </figure>
  <para>
    This  submenu contains some Script-Fu commands, especially the Script-Fu
    console. <link linkend="gimp-concepts-script-fu">Script-Fu</link> is a
    language for writing scripts, which allow you to run a series of
    <acronym>GIMP</acronym> commands automatically.
    <!--
    These scripts create a new image: they are
    <link linkend="standalone-script-fu">stand-alone scripts</link>.
    -->
  </para>
  <sect3>
    <title>Activate the submenu</title>
    <itemizedlist>
      <listitem>
        <para>
          You can access this command from the image menu through
          <menuchoice>
            <guimenu>Filters</guimenu>
            <guimenuitem>Script-Fu</guimenuitem>
          </menuchoice>
        </para>
      </listitem>
    </itemizedlist>
  </sect3>

  <sect3 id="script-fu-refresh">
    <title>Refresh Scripts</title>
    <para>
      You will need this command every time you add, remove, or change a
      Script-Fu script. The command causes the Script-Fus to be reloaded and
      the menus containing Script-Fus to be rebuilt from scratch. If you
      don't use this command, <acronym>GIMP</acronym> won't notice your
      changes until you start it again.
    </para>
    <para>
      Note that you won't get any feedback unless registering of one of your
      scripts failes.
    </para>
  </sect3>

  <sect3 id="plug-in-script-fu-console">
    <title>Script-Fu Console</title>
    <para>
      The Script-Fu console is a dialog window where you can interactively
      test Scheme commands.
    </para>
    <para>
      The console consists of a large scrollable main window for output and a
      textbox used to type Scheme commands. When you type a Scheme statement
      and then press the <keycap>Enter</keycap> key, the command and its
      return value will be displayed in the main window.
    </para>
    <figure>
      <title>The Script-Fu Console</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/menus/script-fu-console.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <para>
      You will find more information about
      <link linkend="gimp-using-script-fu-tutorial-scheme">Scheme</link> and
      examples how to use the
      <link linkend="gimp-using-script-fu-tutorial-console">Script-Fu
      console</link> in <xref linkend="gimp-using-script-fu-tutorial"/>.
    </para>
    <variablelist>
      <title>The Script-Fu Console Buttons</title>
      <varlistentry>
        <term>
          <phrase>Browse</phrase>
        </term>
        <listitem>
          <para>
            This button is next to the Scheme commands textbox. When
            clicked, the
            <link linkend="plug-in-dbbrowser">procedure browser</link> pops
            up, with an additional button at the bottom of the window:
          </para>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/menus/script-fu-console-browse.png" format="PNG"/>
            </imageobject>
            <caption>
              <para>
                The additional button of the Procedure Browser
              </para>
            </caption>
          </mediaobject>
          <para>
            When you press this <guibutton>Apply</guibutton> button in the
            procudure browser, the selected procedure will be pasted into the
            text box:
          </para>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/menus/script-fu-console-browse-applied.png" format="PNG"/>
            </imageobject>
            <caption>
              <para>Applied Script-Fu procedure</para>
            </caption>
          </mediaobject>
          <para>
            Now you just have to replace the parameter names (here:
            <quote>layer</quote> and <quote>mode</quote>) with actual values,
            and then you can call the procedure by pressing
            <keycap>Enter</keycap>.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <phrase>Close</phrase>
        </term>
        <listitem>
          <para>
            Pressing this button closes the  Script-Fu console.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <phrase>Clear</phrase>
        </term>
        <listitem>
          <para>
            Wenn you click on this button, the content of the main window will
            be removed. Note that you can't get back the removed content using
            the <guilabel>Save</guilabel> command.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <phrase>Save</phrase>
        </term>
        <listitem>
          <para>
            This command lets you save the content of the main window, that is
            the Script-Fu console output (including the
            <quote><code>&gt;</code></quote>-characters).
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect3>

  <sect3 id="plug-in-script-fu-server">
    <title>Start Server</title>
    <para>
      This command will start a server, which reads and executes Script-Fu
      (Scheme) statements you send him via a specified port.
    </para>
    <figure>
      <title>The Script-Fu Server Options</title>
      <mediaobject>
        <imageobject>
          <imagedata fileref="images/menus/script-fu-server.png" format="PNG"/>
        </imageobject>
      </mediaobject>
    </figure>
    <variablelist>
      <varlistentry>
        <term>
          <phrase>Server Port</phrase>
        </term>
        <listitem>
          <para>
            The port number where the Script-Fu server will listen. It is
            possible to start more than one server, specifying different port
            numbers, of course.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>
          <phrase>Server Logfile</phrase>
        </term>
        <listitem>
          <para>
            Optionally you can specify the name of a file the server will use
            to log informal and error messages. If no file is specified,
            messages will be written to stdout.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <itemizedlist>
      <title>The Script-Fu Server Protocol</title>
      <para>
        The protocol used to communicate with the Script-Fu server is very
        simple:
      </para>
      <listitem>
        <para>
          Every message (Script-Fu statement) of length <code>L</code> sent to
          the server has to be preceded with the following 3 bytes:
        </para>
        <table>
          <title>Header format for commands</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <phrase>Byte #</phrase>
                </entry>
                <entry>
                  <phrase>Content</phrase>
                </entry>
                <entry>
                  <phrase>Description</phrase>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <phrase>0</phrase>
                </entry>
                <entry>
                  <phrase>0x47</phrase>
                </entry>
                <entry>
                  <phrase>Magic byte ('G')</phrase>
                </entry>
              </row>
              <row>
                <entry>
                  <phrase>1</phrase>
                </entry>
                <entry>
                  <phrase>L div 256</phrase>
                </entry>
                <entry>
                  <phrase>High byte of <code>L</code></phrase>
                </entry>
              </row>
              <row>
                <entry>
                  <phrase>2</phrase>
                </entry>
                <entry>
                  <phrase>L mod 256</phrase>
                </entry>
                <entry>
                  <phrase>Low byte of <code>L</code></phrase>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </listitem>
      <listitem>
        <para>
          Every response from the server (return value or error message) of
          length <code>L</code> will be preceded with the following 4 bytes:
        </para>
        <table>
          <title>Header format for responses</title>
          <tgroup cols="3">
            <thead>
              <row>
                <entry>
                  <phrase>Byte #</phrase>
                </entry>
                <entry>
                  <phrase>Content</phrase>
                </entry>
                <entry>
                  <phrase>Description</phrase>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <phrase>0</phrase>
                </entry>
                <entry>
                  <phrase>0x47</phrase>
                </entry>
                <entry>
                  <phrase>Magic byte ('G')</phrase>
                </entry>
              </row>
              <row>
                <entry>
                  <phrase>1</phrase>
                </entry>
                <entry>
                  <phrase>error code</phrase>
                </entry>
                <entry>
                  <phrase>0 on success, 1 on error</phrase>
                </entry>
              </row>
              <row>
                <entry>
                  <phrase>2</phrase>
                </entry>
                <entry>
                  <phrase>L div 256</phrase>
                </entry>
                <entry>
                  <phrase>High byte of <code>L</code></phrase>
                </entry>
              </row>
              <row>
                <entry>
                  <phrase>3</phrase>
                </entry>
                <entry>
                  <phrase>L mod 256</phrase>
                </entry>
                <entry>
                  <phrase>Low byte of <code>L</code></phrase>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </listitem>
    </itemizedlist>
    <tip>
      <para>
        If you don't want to get your hands dirty: there is a Python script
        named <application>servertest.py</application> shipped with the
        <acronym>GIMP</acronym> 2.5 source code, which you can use as a simple
        command line shell for the Script-Fu server.
      </para>
    </tip>
  </sect3>
</sect2>
