<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect2 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                       "http://www.docbook.org/xml/4.3/docbookx.dtd">
<!-- section history:
  2019-01-14 j.h: update to v2.10
-->
<sect2 xmlns:xi="http://www.w3.org/2001/XInclude" id="gimp-filter-convolution-matrix">
  <title>Convolution Matrix</title>

  <indexterm>
    <primary>Filters</primary>
    <secondary>Generic</secondary>
    <tertiary>Convolution Matrix</tertiary>
  </indexterm>
  <indexterm>
    <primary>Convolution Matrix</primary>
  </indexterm>

  <sect3>
    <title>Overview</title>
    <para>
      Here is a mathematician's domain. Most of filters are using convolution
      matrix. With the Convolution Matrix filter, if the fancy takes you, you
      can build a custom filter.
    </para>
    <para>
      What is a convolution matrix? It's possible to get a rough idea of it
      without using mathematical tools that only a few ones know. Convolution
      is the treatment of a matrix by another one which is called
      <quote>kernel</quote>.
    </para>
    <para>
      The Convolution Matrix filter uses a first matrix which is the Image to
      be treated. The image is a bi-dimensional collection of pixels in
      rectangular coordinates. The used kernel depends on the effect you want.
    </para>
    <para>
      GIMP uses 5×5 or 3×3 matrices. We will consider only 3×3 matrices, they
      are the most used and they are enough for all effects you want. If all
      border values of a kernel are set to zero, then system will consider it
      as a 3×3 matrix.
    </para>
    <para>
      The filter studies successively every pixel of the image. For each of
      them, which we will call the <quote>initial pixel</quote>, it
      multiplies the value of this pixel and values of the 8 surrounding
      pixels by the kernel corresponding value. Then it adds the results,
      and the initial pixel is set to this final result value.
    </para>
    <para>
      A simple example:
    </para>
    <mediaobject>
      <imageobject>
        <imagedata format="PNG"
          fileref="images/filters/examples/convolution-calculate.png"/>
      </imageobject>
    </mediaobject>
    <para>
      On the left is the image matrix: each pixel is marked with its value.
      The initial pixel has a red border. The kernel action area has a green
      border. In the middle is the kernel and, on the right is the convolution
      result.
    </para>
    <para>
      Here is what happened: the filter read successively, from left to right
      and from top to bottom, all the pixels of the kernel action area. It
      multiplied the value of each of them by the kernel corresponding value
      and added results. The initial pixel has become 42:
      (40*0)+(42*1)+(46*0) + (46*0)+(50*0)+(55*0) + (52*0)+(56*0)+(58*0) = 42.
      (the filter doesn't work on the image but on a copy). As a graphical
      result, the initial pixel moved a pixel downwards.
    </para>
  </sect3>

  <sect3>
    <title>Activating the Filter</title>
    <para>
      This filter is found in the main menu under
      <menuchoice>
        <guimenu>Filters</guimenu>
        <guisubmenu>Generic</guisubmenu>
        <guimenuitem>Convolution Matrix…</guimenuitem>
      </menuchoice>.
    </para>
  </sect3>

  <sect3>
    <title>Options</title>
    <figure>
      <title><quote>Convolution matrix</quote> options</title>
      <mediaobject>
        <imageobject>
          <imagedata format="PNG"
            fileref="images/filters/generic/convolution.png"/>
        </imageobject>
      </mediaobject>
    </figure>
    <variablelist>
      <varlistentry>
        <term>Presets</term>
        <term><quote>Input Type</quote></term>
        <term>Clipping</term>
        <term>Blending Options</term>
        <term>Preview</term>
        <term>Merge filter</term>
        <term>Split view</term>
        <listitem>
          <xi:include href="../about-common-features.xml"/>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Matrix</term>
        <listitem>
          <para>
            This is the 5×5 kernel matrix: you enter wanted values directly
            into boxes.
          </para>
          <variablelist>
            <varlistentry>
              <term>Divisor</term>
              <listitem>
                <para>
                  The result of previous calculation will be divided by this
                  divisor. You will hardly use anything else than 1, which
                  leaves results unchanged, and 9 or 25 according to matrix size,
                  which gives the average of pixel values. The divisor can only
                  be changed when Normalize is unchecked.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Offset</term>
              <listitem>
                <para>
                  This value is added to the division result. This is useful
                  if result may be negative. This offset may be negative. It
                  can only be changed when Normalize is unchecked.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Channels</term>
        <listitem>
          <para>
            Here you can select which channels the filter should change.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Normalize</term>
        <listitem>
          <para>
            If this option is checked, The Divisor takes the result value of
            convolution. If this result is equal to zero (it's not possible
            to divide by zero), then a 128 offset is applied. If it is
            negative (a negative color is not possible), a 255 offset is
            applied (inverts result).
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Alpha-weighting</term>
        <listitem>
          <para>
            If this option is not checked, the filter doesn't take in account
            transparency and this may be cause of some artefacts when
            blurring.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Border</term>
        <listitem>
          <para>
            When the initial pixel is on a border, a part of the kernel is
            outside the image. You have to decide what the filter should do:
          </para>

          <figure>
            <title>Border examples</title>
            <mediaobject>
              <imageobject>
                <imagedata format="PNG"
                  fileref="images/filters/generic/convolution-milord.png"/>
              </imageobject>
              <caption>
              <para>
                Source image
              </para>
            </caption>
            </mediaobject>
            <mediaobject>
              <imageobject>
                <imagedata format="PNG"
                  fileref="images/filters/generic/convolution-extend.png"/>
              </imageobject>
              <caption>
                <para>
                  <guilabel>None</guilabel> border
                </para>
              </caption>
            </mediaobject>
            <mediaobject>
              <imageobject>
                <imagedata format="PNG"
                  fileref="images/filters/generic/convolution-crop.png"/>
              </imageobject>
              <caption>
                <para>
                  <guilabel>Clamp</guilabel> border
                </para>
              </caption>
            </mediaobject>
            <mediaobject>
              <imageobject>
                <imagedata format="PNG"
                  fileref="images/filters/generic/convolution-wrap.png"/>
              </imageobject>
              <caption>
                <para>
                  <guilabel>Loop</guilabel> border
                </para>
              </caption>
            </mediaobject>
          </figure>
          <variablelist>
            <varlistentry>
              <term>None</term>
              <listitem>
                <para>This part of the kernel is not taken into account.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Clamp</term>
              <listitem>
                <para>
                  Pixels on borders are not modified, but they are cropped.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Loop</term>
              <listitem>
                <para>
                  This part of the kernel will be affected by pixels of the
                  opposite border, so pixels disappearing from one side
                  reappear on the other side.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Black</term>
              <listitem>
                <para>
                  Pixels on borders are changed to black.
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>White</term>
              <listitem>
                <para>
                  Pixels on borders are changed to white.
                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </listitem>
      </varlistentry>
    </variablelist>
  </sect3>

  <sect3>
    <title>Examples</title>
    <para>
      Design of kernels is based on high levels mathematics. You can find
      ready-made kernels on the Web. Here are a few examples:
    </para>
    <figure>
      <title>Sharpen</title>
      <mediaobject>
        <imageobject>
          <imagedata format="PNG"
            fileref="images/filters/examples/convolution-sharpen.png"/>
        </imageobject>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata format="JPG"
            fileref="images/filters/examples/generic-taj-convmatrix-sharpen.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <figure>
      <title>Blur</title>
      <mediaobject>
        <imageobject>
          <imagedata format="PNG"
            fileref="images/filters/examples/convolution-blur.png"/>
        </imageobject>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata format="JPG"
            fileref="images/filters/examples/generic-taj-convmatrix-blur.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <figure>
      <title>Edge enhance</title>
      <mediaobject>
        <imageobject>
          <imagedata format="PNG"
            fileref="images/filters/examples/convolution-edge.png"/>
        </imageobject>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata format="JPG"
            fileref="images/filters/examples/generic-taj-convmatrix-edge-enhance.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <figure>
      <title>Edge detect</title>
      <mediaobject>
        <imageobject>
          <imagedata format="PNG"
            fileref="images/filters/examples/convolution-edge-detect1.png"/>
        </imageobject>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata format="JPG"
            fileref="images/filters/examples/generic-taj-convmatrix-edge-detect.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
    <figure>
      <title>Emboss</title>
      <mediaobject>
        <imageobject>
          <imagedata format="PNG"
            fileref="images/filters/examples/convolution-emboss.png"/>
        </imageobject>
      </mediaobject>
      <mediaobject>
        <imageobject>
          <imagedata format="JPG"
            fileref="images/filters/examples/generic-taj-convmatrix-emboss.jpg"/>
        </imageobject>
      </mediaobject>
    </figure>
  </sect3>
</sect2>
