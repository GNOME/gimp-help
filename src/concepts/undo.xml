<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
                       "http://www.docbook.org/xml/4.3/docbookx.dtd">
<!-- section history:
  2009-02-21 j.h: revised for v2.6
  2008-03-23 reviewed 'ko' by Mr.Dust
  2006-09-06 added norwegian translation by KoSt
  2006-05-02 Dust: added Korean translation
  2006-02-25 lexa: added translation for de and made file docbook compliant
-->
<sect1 id="gimp-concepts-undo">
  <title>Undoing</title>
  <indexterm>
    <primary>Undo</primary>
  </indexterm>

  <para>
    Almost anything you do to an image in <acronym>GIMP</acronym> can be
    undone.  You can undo the most recent action by choosing
    <menuchoice>
      <guimenu>Edit</guimenu>
      <guimenuitem>Undo</guimenuitem>
    </menuchoice>
    from the image menu, but this is done so frequently that you
    really should memorize the keyboard shortcut,
    <keycombo><keycap>Ctrl</keycap><keycap>Z</keycap></keycombo>.
  </para>
  <para>
    Undoing can itself be undone. After having undone an action, you
    can <emphasis>redo</emphasis> it by choosing
    <menuchoice>
      <guimenu>Edit</guimenu>
      <guimenuitem>Redo</guimenuitem>
    </menuchoice>
    from the image menu, or use the keyboard shortcut,
    <keycombo><keycap>Ctrl</keycap><keycap>Y</keycap></keycombo>.
    It is often helpful to judge the effect of an action by repeatedly
    undoing and redoing it.  This is usually very quick, and does not
    consume any extra resources or alter the undo history, so there is
    never any harm in it.
  </para>
  <caution>
    <para>
      If you undo one or more actions and then operate on the image in any way
      except by using Undo or Redo, it will no longer be possible to redo
      those actions: they are lost forever. The solution to this, if it
      creates a problem for you, is to duplicate the image and then test on
      the copy. ( Do <emphasis>Not</emphasis> test the original, because the
      undo/redo
      history is not copied when you duplicate an image.)
    </para>
  </caution>
  <para>
    If you often find yourself undoing and redoing many steps at a time, it
    may be more convenient to work with the
    <link linkend="gimp-undo-dialog">Undo History dialog</link>,
    a dockable dialog that shows you a small sketch of each point in the
    Undo History, allowing you to go back or forward to that point by
    clicking.
  </para>
  <para>
    Undo is performed on an image-specific basis: the "Undo History" is one of
    the components of an image. <acronym>GIMP</acronym> allocates a certain
    amount of memory to
    each image for this purpose. You can customize your Preferences to
    increase or decrease the amount, using the
    <link linkend="gimp-prefs-environment">Environment</link>
    page of the Preferences dialog. There are two important variables: the
    <emphasis>minimal number of undo levels</emphasis>,
    which <acronym>GIMP</acronym> will maintain regardless of how much memory
    they consume, and
    the <emphasis>maximum undo memory</emphasis>, beyond which
    <acronym>GIMP</acronym> will
    begin to delete the oldest items from the Undo History.
  </para>
  <note>
    <para>
      Even though the Undo History is a component of an image, it is not saved
      when you save the image using <acronym>GIMP</acronym>'s native XCF
      format, which preserves
      every other image property. When the image is reopened, it will have an
      empty Undo History.
    </para>
  </note>
  <para>
    <acronym>GIMP</acronym>'s implementation of Undo is rather sophisticated.
    Many
    operations require very little Undo memory (e.g., changing visibility of a
    layer), so you can perform long sequences of them before they drop out of
    the Undo History. Some operations, such as changing layer visibility,
    are <emphasis>compressed</emphasis>,
    so that doing them several times in a row produces only a single point
    in the Undo History. However, there are other operations that may consume
    a lot of undo memory. Most filters are implemented by plug-ins, so the
    <acronym>GIMP</acronym> core has no efficient way of
    knowing what changed. As such, there is no way to implement Undo except
    by memorizing the entire contents of the affected layer before and after
    the operation. You might only be able to perform a few such operations
    before they drop out of the Undo History.
  </para>
  <sect2>
    <title>Things That Cannot be Undone</title>
    <para>
      Most actions that alter an image can be undone. Actions that do not
      alter the image generally cannot be undone. Examples include
      saving the image to a file, duplicating the image, copying part of the
      image to the clipboard, etc. It also includes most actions that affect
      the image display without altering the underlying image data. The most
      important example is zooming. There are, however, exceptions: toggling
      QuickMask on or off can be undone, even though it does not alter the
      image data.
    </para>
    <para>
      There are a few important actions that do alter an image but
      cannot be undone:
    </para>
    <variablelist>
      <varlistentry>
        <term>Closing the image</term>
        <listitem>
          <para>
            The Undo History is a component of the image, so when the image is
            closed and all of its resources are freed, the Undo History is
            gone. Because of this, unless the image has not been modified
            since the last time it was saved, <acronym>GIMP</acronym> always
            asks you to confirm that you really want to close the image.
            (You can disable this in the
            <link linkend="gimp-prefs-environment">Environment</link>
            page of the Preferences dialog; if you do, you are assuming
            responsibility for thinking about what you are doing.)
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term>Reverting the image</term>
        <listitem>
          <para><quote>Reverting</quote>
            means reloading the image from the file.
            <acronym>GIMP</acronym> actually implements this
            by closing the image and creating a new image, so the Undo History
            is lost as a consequence. Because of this, if the image is
            unclean, <acronym>GIMP</acronym> asks you to confirm that
            you really want to revert the image.
          </para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><quote>Pieces</quote> of actions</term>
        <listitem>
          <para>
            Some tools require you to perform a complex series of
            manipulations before they take effect, but only allow you to undo
            the whole thing rather than the individual elements. For example,
            the Intelligent Scissors require you to create a closed path by
            clicking at multiple points in the image, and then clicking inside
            the path to create a selection. You cannot undo the individual
            clicks: undoing after you are finished takes you all the way back
            to the starting point. For another example, when you are working
            with the Text tool, you cannot undo individual letters, font
            changes, etc.: undoing after you are finished removes the newly
            created text layer.
          </para>
        </listitem>
      </varlistentry>
    </variablelist>
    <para>
      Filters, and other actions performed by plugins or scripts, can be
      undone just like actions implemented by the <acronym>GIMP</acronym>
      core, but this requires
      them to make correct use of <acronym>GIMP</acronym>'s Undo functions. If
      the code is not
      correct, a plugin can potentially corrupt the Undo History, so that not
      only the plugin but also previous actions can no longer properly be
      undone. The plugins and scripts distributed with <acronym>GIMP</acronym>
      are all believed
      to be set up correctly, but obviously no guarantees can be given for
      plugins you obtain from other sources. Also, even if the code is
      correct, canceling a plugin while it is running may corrupt the
      Undo History, so it is best to avoid this unless you have
      accidentally done something whose consequences are going to be very
      harmful.
    </para>
  </sect2>
</sect1>
